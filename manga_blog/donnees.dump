--
-- PostgreSQL database dump
--

-- Dumped from database version 15.3
-- Dumped by pg_dump version 15.3

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: accounts_user_userprofile; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.accounts_user_userprofile (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    avatar character varying(100)
);


ALTER TABLE public.accounts_user_userprofile OWNER TO postgres;

--
-- Name: accounts_user_userprofile_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.accounts_user_userprofile ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.accounts_user_userprofile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: articles_article; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.articles_article (
    id bigint NOT NULL,
    title character varying(200) NOT NULL,
    content text NOT NULL,
    publication_date timestamp with time zone NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    author_id integer NOT NULL,
    sous_content character varying(1000) NOT NULL,
    image_article character varying(100)
);


ALTER TABLE public.articles_article OWNER TO postgres;

--
-- Name: articles_article_categorie; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.articles_article_categorie (
    id bigint NOT NULL,
    article_id bigint NOT NULL,
    categorie_id bigint NOT NULL
);


ALTER TABLE public.articles_article_categorie OWNER TO postgres;

--
-- Name: articles_article_categorie_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.articles_article_categorie ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.articles_article_categorie_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: articles_article_genre; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.articles_article_genre (
    id bigint NOT NULL,
    article_id bigint NOT NULL,
    genre_id bigint NOT NULL
);


ALTER TABLE public.articles_article_genre OWNER TO postgres;

--
-- Name: articles_article_genre_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.articles_article_genre ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.articles_article_genre_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: articles_article_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.articles_article ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.articles_article_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: articles_article_tag; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.articles_article_tag (
    id bigint NOT NULL,
    article_id bigint NOT NULL,
    tag_id bigint NOT NULL
);


ALTER TABLE public.articles_article_tag OWNER TO postgres;

--
-- Name: articles_article_tag_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.articles_article_tag ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.articles_article_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: articles_categorie; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.articles_categorie (
    id bigint NOT NULL,
    categorie character varying(200) NOT NULL,
    description character varying(1000),
    image_categorie character varying(100)
);


ALTER TABLE public.articles_categorie OWNER TO postgres;

--
-- Name: articles_categorie_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.articles_categorie ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.articles_categorie_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: articles_comment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.articles_comment (
    id bigint NOT NULL,
    content text NOT NULL,
    created_at timestamp with time zone NOT NULL,
    article_id bigint NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.articles_comment OWNER TO postgres;

--
-- Name: articles_comment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.articles_comment ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.articles_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: articles_genre; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.articles_genre (
    id bigint NOT NULL,
    genre character varying(200) NOT NULL
);


ALTER TABLE public.articles_genre OWNER TO postgres;

--
-- Name: articles_genre_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.articles_genre ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.articles_genre_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: articles_tag; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.articles_tag (
    id bigint NOT NULL,
    tag character varying(200) NOT NULL
);


ALTER TABLE public.articles_tag OWNER TO postgres;

--
-- Name: articles_tag_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.articles_tag ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.articles_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO postgres;

--
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO postgres;

--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO postgres;

--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment_comment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.comment_comment (
    id bigint NOT NULL,
    content text NOT NULL,
    created_at timestamp with time zone NOT NULL,
    article_id bigint NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.comment_comment OWNER TO postgres;

--
-- Name: comment_comment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.comment_comment ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comment_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- Data for Name: accounts_user_userprofile; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.accounts_user_userprofile (id, user_id, avatar) FROM stdin;
2	6	avatars/avatar_V06Ox0w.jpg
3	7	
1	1	avatars/hells_paradise.jpg
\.


--
-- Data for Name: articles_article; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.articles_article (id, title, content, publication_date, created_at, updated_at, author_id, sous_content, image_article) FROM stdin;
1	Le meilleur combat dans Dragon Ball Z	La bataille contre Vegeta dans la saga Saiyan a été le combat décisif pour la saga. Bien que Goku n’ait pas été celui qui a vaincu Vegeta, il a fourni aux fans un combat incroyable contre le prince Saiyan. La rivalité entre ces deux guerriers a commencé ici avec l’opprimé, Goku, faisant de son mieux pour vaincre Vegeta.\r\n\r\nCe qui a excité les fans, c’était le flash d’éclairage et les différentes couleurs qui émanaient de ces personnages pendant qu’ils se battaient. Avec l’aura violette de Vegeta (également la couleur de son Galick Gun) et le Kaioken rouge de Goku. Ce fut certainement le premier et le plus intense combat de l’ère Dragon Ball Z.	2023-07-23 21:53:30+02	2023-07-23 21:53:54.570164+02	2023-07-25 17:54:56.641055+02	1	Tout le monde le sait , les combats dans dragon ball Z sont complètement délirant. D'après vous quel est le meilleur combat dans Dragon ball Z?	article_images/goku2-1024x768.jpg
4	Histoire de Nezuko Kamado	Nezuko est une jeune petite fille à la peau claire, aux crocs visiblement grands et proéminents et aux ongles pointus pointus avec une couleur de base rose pâle et ombrée passant à une couleur rouge-rosé à la fin où ils pointent. Ses cheveux sont longs, noirs et ondulés. Ils atteignent juste en dessous de sa taille, prenant une couleur orange flamme lorsqu'ils passent ses coudes, et semble être serti en de grandes crêtes droites, portées latéralement radicalement vers sa gauche. Elle a des yeux rose pâle d'apparence douce qui apparaissent d'une couleur plus claire autour des bords de leurs iris, inclinés vers le bas vers les côtés de son visage et encadrés par des cils particulièrement longs, dont les pupilles peuvent apparaître fendues au fur et à mesure qu'elle se transforme. Dans le manga, Nezuko peut parfois être montré avec plus d'un arc. Selon Tanjiro Kamado, Nezuko était connue comme une grande beauté dans leur ville natale.\r\n\r\nElle porte un kimono rose clair avec un motif asanoha (feuille de chanvre), la doublure rose plus pâle, sécurisée par un hanhaba obi à carreaux rouges et blancs avec un obijime à filet orange et un obiage vert. Par-dessus, elle porte un long haori brun foncé qui atteint ses mollets, ainsi qu'une paire de zōri avec des bretelles roses et des chaussettes tabi blanches, enveloppées d'épais morceaux de tissu noir ressemblant à du kyahan. Nezuko porte également un petit ruban rose sur le côté gauche de sa tête pour garder ses cheveux hors de son visage, ainsi que le museau en bambou que Giyu Tomioka lui a donné, qui est fixé autour de sa mâchoire avec une bande de tissu rouge.\r\n\r\nLorsque Nezuko se transforme en sa forme éveillée lors de son combat avec Daki, elle perd à la fois son bâillon et ses chaussures, ainsi que les manches de son haori et de son kimono. Elle fait pousser une courte corne blanche sur le côté droit de son front et un motif en forme de veine apparaît autour de son œil gauche, mais sa nouvelle caractéristique la plus frappante est le motif en forme de vigne rouge et vert qui recouvre sa peau, entourant ses bras, ses jambes et sa poitrine.\r\n\r\nEn tant qu'humaine, elle avait une apparence très similaire, les seules différences étant son absence de traits de démon, ses cheveux vermillon et ses yeux rose pâle. Au lieu de cela, Nezuko avait des cheveux entièrement noirs, attachés en trois chignons bas, décorés de rubans roses, et des yeux de couleur rouge foncé qui n'apparaissaient que rose pâle autour de leurs iris inférieurs. Elle portait le même kimono, juste sans son haori et avec un grand drap blanc noué autour d'elle, qu'elle utilisait pour porter son petit frère, Rokuta Kamado, sur son dos.\r\n\r\nPersonnalité\r\n\r\nEn tant que démon, cependant, Nezuko semble avoir oublié une bonne partie de ses souvenirs en tant qu'humain, en plus de ceux liés à sa famille, et ne conserve donc pas la personnalité exacte qu'elle avait avant la transformation. Elle est toujours très attentionnée et protectrice envers les humains qu'elle considère comme des membres de sa famille, bien que cela soit principalement dû à l'influence que Sakonji Urokodaki a eue sur elle pendant qu'elle dormait pendant deux ans. Nezuko conserve également certaines de ses émotions humaines, car on l'a vue pleurer lorsqu'elle est triste et sourire lorsqu'elle est heureuse, mais en général, elle semble plus détachée que ses cohortes humaines, bien qu'elle soit toujours beaucoup plus calme et moins malveillante que la plupart des démons. Nezuko a également tendance à voir les images de ses frères et sœurs chez d'autres humains, comme Rokuta Kamado et Yushiro.\r\n\r\nDepuis qu'elle est devenu un démon, Nezuko semble être également devenu plutôt effronté et ne semble pas craindre de se battre ; elle garde farouchement son frère ainsi que ses alliés. Elle a également développé une forte volonté, qui peut être vue à travers son refus de consommer de la chair ou du sang humain, même en cas de blessure extrême ou d'exposition au sang humain, ce qui peut être vu lorsqu'elle refuse Sanemi Shinazugawa après qu'il ait tenté de l'attirer dans le mordant avec son sang de Marechi.[6] Sa forte volonté reste même lorsqu'elle n'est plus un démon, comme elle le montre lorsqu'elle saute volontairement devant Inosuke pour le protéger de son propre frère, qui était devenu un démon et tentait de tuer ceux qui l'entouraient. Même si elle aurait pu être tuée, Nezuko n'a pas hésité à protéger son frère.\r\n\r\nDans les rares occasions où Nezuko tente de parler, on l'a vue bégayer beaucoup, ce qui peut être dû à son embout buccal en bambou, qui est rarement retiré, et au fait qu'elle n'a pas parlé pendant plusieurs années après sa transformation. Cependant, après avoir développé une résistance à la lumière du soleil, ce qui lui permet de sortir et d'interagir plus souvent avec les autres, son discours a montré des signes d'amélioration et elle est capable de prononcer pleinement les mots si quelqu'un d'autre vient de les prononcer,[7] ou les entend répétés assez fréquemment.[8]\r\n\r\nLa personnalité originale de Nezuko en tant qu'humaine était celle d'une fille gentille et attentionnée qui pensait aux autres avant elle-même un peu comme son frère aîné, Tanjiro. De plus, elle était une sœur aînée responsable de ses frères et sœurs plus jeunes et faisait souvent passer leurs besoins en premier plutôt que les siens.[9][10] Nezuko n'a cependant pas peur de se mettre en danger, protégeant ses amis des démons même après avoir été ramenée à un état humain. Il est également démontré que le comportement humain et décontracté de Nezuko soutient ce fait après que Tanjiro se soit excusé auprès d'elle.[	2023-07-28 16:28:00+02	2023-07-26 15:04:50.196702+02	2023-08-08 17:25:09.571326+02	1	Tout savoir sur l'histoire de Nezuko Kamado qui est l'un des personnages feminin le plus apprécié du manga Demon slayer (Kimitsu No Yaiba en Japonais)	article_images/nezuko-Kamado-Demon-Slayer-Kimetsu-no-Yaiba-3_728x.webp
2	Classement des piliers par puissance (Demon Slayer)	Dans le manga et l’anime Demon Slayer (ou Kimetsu no Yaiba dans sa version japonaise), les piliers (également appelés Hashira, 柱) sont les neuf épéistes les plus puissants de l’armée des pourfendeurs de démon. Ils sont triés sur le volet afin d’accéder au plus haut niveau de l’organisation. En plus de représenter la crème de la crème de l’armée des « gentils », ils sont particulièrement présents en première ligne pour lutter contre Muzan Kibutsuji. On les qualifie régulièrement d’équivalent des lunes démoniaques, qui sont les démons les plus puissants.\r\n\r\nIl n’est pas rare qu’une lune démoniaque arrive à bout d’un pilier. L’histoire nous montre que l’inverse se produit beaucoup plus rarement, malheureusement pour le camp des humains. Quoi qu’il en soit, on dénombre neuf piliers et chacun possède un souffle différent. Cet élément (air, feu, eau, vent, etc.) s’apprend en s’entraînant. Chaque Hashira est sous la direction de Kagaya Ubuyashiki, un personnage énormément respecté et reconnu pour sa sagesse.	2023-07-23 23:05:09+02	2023-07-23 23:05:34.272897+02	2023-07-26 14:54:00.911926+02	1	Les piliers sont les personnages les plus imposants de ce manga, chacun avec son lot de caractéristiques et de puissanges	article_images/pilier.webp
7	Naruto : Pourquoi Kisame ressemble à un requin ?	Il y a beaucoup de capacités et de designs étranges dans le monde de Naruto. Certains ninjas peuvent se transformer en eau, avoir une bouche sur les mains ou utiliser leurs propres os comme armes.\r\n\r\nLa plupart du temps, ce comportement étrange s’explique par une technique héréditaire ou un jutsu interdit qui a été utilisé sur la personne. Kisame Hoshigaki, un membre de l’Akatsuki, est le seul à ne pas être comme ça.\r\n\r\nKisame était l’un des sept épéistes de la brume et l’une des premières personnes à rejoindre l’Akatsuki.\r\n\r\nKisame semble très différent de ses amis des deux groupes. L’épéiste a la peau bleue, des yeux de poisson, des dents triangulaires pointues et ce qui ressemble à de multiples branchies sur tout le corps.\r\n\r\nPourquoi Kisame ressemble-t-il à un requin et semble-t-il ne pas avoir de sentiments ? Pourquoi Kisame, dans le monde de Naruto, est-il si différent de tous les autres ?\r\nMême si Naruto n’a jamais dit directement ce qui fait que Kisame ressemble à un requin, il y a quelques réponses possibles.\r\n\r\nIl est possible que Kisame ait un gène qui modifie son apparence. Au cours d’une partie de Boruto qui n’était que dans l’anime, un personnage nommé Shizuma Hoshigaki a été vu pour la première fois. Ce personnage était apparenté à Kisame, et tous deux ressemblaient à des requins.\r\n\r\nIl se peut que la lignée du clan Hoshigaki ait quelque chose qui fasse ressembler ses membres à des requins. Cela serait logique, puisque le village caché de la brume, d’où vient Kisame, comptait de nombreux clans qui ont été anéantis parce qu’ils avaient trop de personnes de la même lignée.\r\n\r\nAvec une règle aussi connue, le clan Hoshigaki aurait été le premier à être attaqué. Kisame et Shizuma ont pu être les seuls à rester dans ce clan après cette purge.\r\n\r\nSi cette théorie est juste, le fait que tout le clan de Kisame soit mort pourrait être une autre raison pour laquelle il a quitté le village.\r\n\r\nVivre dans un village où les gens s’entretuent sans raison a pu le rendre encore moins heureux chez lui. Mais il n’y a pas beaucoup de preuves que cela soit vrai. Boruto ne parle du clan Hoshigaki que dans ce seul arc de l’anime, il est donc difficile de dire dans quelle mesure c’est canonique.	2023-07-29 18:56:00+02	2023-07-29 16:00:33.02502+02	2023-08-08 17:27:38.682013+02	1	C’est peut-être quelque chose que les sept épéistes de la brume font chaque année.	article_images/Kisame-Hoshigaki-requin.webp
9	A propos de Hell's Paradise	Hell's Paradise est un shōnen manga écrit et dessiné par Yūji Kaku. Il est prépublié du 22 janvier 2018 au 25 janvier 2021 dans le Shōnen Jump+, puis publié en volumes reliés en un total de 13 volumes par l'éditeur japonais Shūeisha. La version française est éditée par Kazé du 13 mars 2019 au 25 août 2021	2023-08-09 15:55:00+02	2023-08-09 02:56:39.886436+02	2023-08-09 02:56:39.886436+02	1	Connaitre les auteurs de ce magnifique chef-d'oeuvre	article_images/hh1-800x550.jpg.webp
10	Qui est Dark Deku?	Izuku Midoriya incarne indéniablement ce que signifie être un héros. Il possède un cœur qui ne lui permet pas d’abandonner qui que ce soit, tout en étant prêt à s’offrir pour le bien d’autrui. Mais c’est ce même trait de caractère qui a donné naissance à Dark Deku. Contrairement à ce que son nom suggère, Dark Deku n’est pas nécessairement mauvais. Il reste un héros, et un héros très efficace. La seule différence entre le Deku normal et Dark Deku est que Dark Deku opère de manière isolée. Il agit en héros comme une ombre, allant et venant comme un voleur dans la nuit.\r\n\r\nPour comprendre comment un tel personnage a vu le jour, il est impératif de faire un bref rappel de la relation de Deku avec Shigaraki et All For One. Ayant hérité de One For All de All Might, Midoriya détenait la clé pour s’opposer et vaincre Shigaraki et All For One. Bien entendu, les super-vilains n’allaient pas laisser Izuku obtenir les bonus dont il avait besoin pour s’opposer à eux. Après s’être échappé des profondeurs du Tartare, All For One a immédiatement traqué le jeune héros. Il a constamment suivi ses moindres mouvements, envoyant un certain nombre de méchants notoires pour abattre et capturer Deku. C’est précisément pour cette raison que Midoriya a choisi de s’isoler dans les rues, afin d’épargner à ses proches le danger que représente All For One. De plus, la menace d’All For One a forcé Izuku à passer à la vitesse supérieure.\r\n\r\nPendant qu’il était Dark Deku, Midoriya a parcouru les rues à la recherche de criminels. Ce faisant, il a maîtrisé un certain nombre de ses alters grâce aux conseils des anciens utilisateurs de One For All. Bien qu’efficace, Dark Deku n’a pas duré longtemps. Ses camarades de classe 1-A sont finalement intervenus pour mettre fin à son activité de justicier. Ils ont uni leurs forces pour arrêter Midoriya et le ramener à U.A. pour un repos bien mérité.	2023-08-10 14:59:00+02	2023-08-09 02:59:50.466919+02	2023-08-09 02:59:50.466919+02	1	My Hero Academia : Quelle est la force de Dark Deku ?	article_images/Feat-My-HEro-Academia.jpg
8	DBZ : Trunks du futur expliqué	Dans de nombreux types de médias, l’utilisation du voyage dans le temps pour sauver un monde post-apocalyptique est un cliché courant.\r\n\r\nDragon Ball Z adopte une approche unique en utilisant le voyage dans le temps pour exacerber le conflit au lieu de le résoudre. Trunks est le dernier guerrier Z du futur, 20 ans dans le futur. Ses efforts pour modifier l’histoire afin de sauver son propre avenir brisé ne font qu’ajouter à la complexité de la ligne temporelle principale de l’histoire.\r\n\r\nL’avenir du jeune Saiyan du futur semble bien sombre. Deux androïdes impitoyables et cruels apparaissent six mois après que Goku ait succombé à un virus cardiaque fatal.\r\n\r\nAu combat, ces nouveaux ennemis assassinent les Z Fighters, ne laissant que Gohan en vie. Sans personne pour les combattre, le duo maléfique transforme le globe entier en leur propre terrain de jeu, réduisant la population de la Terre à quelques dizaines de milliers d’habitants. Les quelques survivants sont contraints de vivre sous terre en secret.\r\nDans l’univers de Dragon Ball, la mort n’est généralement pas un gros problème. La mort de Piccolo, par contre, rend les Dragon Balls inutilisables dans la ligne temporelle future de Trunks. Comme personne ne sait où se trouve New Namek, les Dragon Balls de Namek sont également inutilisables. Souhaiter le retour à la vie des individus n’est plus une option dans cette ligne temporelle.\r\n\r\nTrunks, le fils de Vegeta et Bulma, grandit sur cette Terre déchirée par la guerre. Gohan est le mentor et le compagnon solitaire du jeune héros maintenant qu’il est adulte.\r\n\r\nMalgré le fait qu’il soit un Super Saiyan, Gohan est incapable de vaincre les androïdes et finit par leur succomber au combat. Pour la première fois, Trunks, endeuillé, entre dans la condition de Super Saiyan à la suite de son deuil. Les androïdes sœurs, cependant, mangent les Super Saiyans au petit déjeuner, et le dernier Guerrier Z est impuissant à les arrêter.\r\nBulma construit une machine à remonter le temps au prix de nombreuses vies afin que Trunks puisse voyager dans le temps et sauver la vie de Goku.\r\n\r\nElle espère qu’en travaillant ensemble, ils pourront vaincre les androïdes et inverser leur destin. La mère et le fils, quant à eux, ne sont pas certains que le voyage dans le passé modifiera le futur ou entraînera une chronologie ramifiée. Ils décident que c’est un risque à prendre et exécutent le plan.\r\n\r\nLa première preuve que Trunks a involontairement forcé la chronologie principale de la série à se séparer de la sienne apparaît dans l’épisode 131 de Dragon Ball Z. Le Saiyan voyageur dans le temps découvre les restes carbonisés d’Android 19, qu’il n’avait jamais vu auparavant. Il a peut-être fait plus de mal que de bien en modifiant la ligne temporelle.	2023-07-29 18:23:00+02	2023-07-29 16:23:39.275711+02	2023-07-29 16:45:28.859141+02	1	Toute les explications concernant Trunks du futur	article_images/trunks-du-futur_8hRfHtX.webp
\.


--
-- Data for Name: articles_article_categorie; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.articles_article_categorie (id, article_id, categorie_id) FROM stdin;
4	2	1
5	2	3
6	1	1
7	1	2
8	4	3
10	7	1
11	7	4
14	8	1
15	8	2
16	4	1
17	9	6
18	10	1
19	10	7
\.


--
-- Data for Name: articles_article_genre; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.articles_article_genre (id, article_id, genre_id) FROM stdin;
5	2	1
7	2	4
8	2	6
9	2	11
10	1	1
11	1	5
12	1	6
13	2	5
14	4	1
16	4	5
17	4	6
21	7	1
22	7	5
23	8	1
24	8	2
25	8	5
26	4	7
27	7	6
28	7	7
29	9	1
30	9	2
31	9	4
32	9	5
33	9	6
34	9	7
35	10	1
36	10	5
37	10	9
38	10	7
\.


--
-- Data for Name: articles_article_tag; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.articles_article_tag (id, article_id, tag_id) FROM stdin;
7	2	2
8	2	3
9	2	4
10	2	6
11	2	10
12	1	1
13	1	7
14	1	8
15	1	10
16	1	11
17	2	11
18	4	2
19	4	3
20	4	4
21	4	6
22	4	10
23	4	11
28	7	10
30	7	13
31	7	12
32	7	5
33	7	11
34	8	1
35	8	7
36	8	8
37	8	10
38	8	11
39	4	13
40	9	4
41	9	10
42	9	11
43	9	12
44	9	13
45	10	10
46	10	11
47	10	13
\.


--
-- Data for Name: articles_categorie; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.articles_categorie (id, categorie, description, image_categorie) FROM stdin;
6	Hell's paradise	Gabimaru, un célèbre et puissant shinobi a été capturé et croupit en prison. Affirmant n'avoir plus aucune raison de vivre, il attend désespérément qu'un bourreau parvienne à l'achever, son entraînement surhumain lui permettant de résister aux pires des châtiments.	categorie_images/hells_paradise.jpg
5	Mashles	Mash Burnedead est né sans pouvoirs magiques mais a survécu caché dans une épaisse forêt. Le jour où son secret est découvert, il se voit proposer un marché : intégrer Easton, la prestigieuse académie de magie, et y obtenir le titre d'élu divin.	categorie_images/418A4F26-799C-420C-AA4C-3DD10C4CECE4.jpeg
4	Naruto Shippuden	Après deux ans et demi d'entraînement avec Jiraya, il retrouve ses camarades de l'Académie des ninja ainsi que ses professeurs de Konoha. Tous ont évolué, y compris les ninjas du village de Suna. Seul Kakashi, semble être resté fidèle à lui-même ! Hélas, les retrouvailles sont de courte durée.	categorie_images/910ca2eb1c437132b9d4aeeb8010512a.webp
3	Demon Slayer	Un petit marchand de charbon nommé Tanjiro vit une vie sans histoire dans les montagnes. Jusqu'au jour tragique où, après une courte absence, il retrouve son village et sa famille massacrés par un ogre ! La seule survivante de cette tragédie est sa jeune sœur Nezuko.	categorie_images/DS.jpeg
2	Dragon Ball	Dragon Ball raconte les aventures de Goku, un jeune garçon doté d'une queue de singe. L'histoire commence lorsque Goku rencontre Bulma, qui est à la recherche des sept boules de cristal. Ces boules de cristal ont un pouvoir qui exaucerait n'importe quel souhait une fois les 7 d'entre elles réunies.	categorie_images/Dragon_Ball_Super.png
1	Actualité Manga	Recevez tous les actualités de vos mangas favoris et amusez-vous!	categorie_images/TM_LOGO_2022_TR_RED.png
7	My Heroes Academia (MHA)	Dans un futur proche suite à une mutation génétique, 80% de la population mondiale possède des super-pouvoirs appelés "Alters". Le plus célèbre des super-héros se nomme All Might. Izuku Midoriya en est fan, et rêve d'intégrer la filière super-héroïque du lycée Yuei pour suivre les traces de son idole.	categorie_images/meilleurs-personnages-my-hero-academia.webp
\.


--
-- Data for Name: articles_comment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.articles_comment (id, content, created_at, article_id, user_id) FROM stdin;
3	Le personnage est très bien développé comme également tout ce qui l'entoure. L'un des points forts de cet arc est l'évolution de sa relation avec Végéta	2023-08-08 16:08:37.403602+02	8	1
2	On se souvient que la première que les deux hommes se sont rencontrés, Végéta qui ignorait qui était réellement Trunks, se méfiait de lui et même le jalousait.	2023-08-08 16:05:32.291166+02	8	1
1	Bulma construit une machine à remonter le temps au prix de nombreuses vies afin que Trunks puisse voyager dans le temps et sauver la vie de Goku.	2023-08-08 16:05:05.833219+02	8	1
4	La plus mimi de tous les personnages de demon slayer. Elle merite d'être parmis les 5 premieres plus forte personnages feminin	2023-08-08 17:09:53.655371+02	4	6
5	Exactement Okit , je la kiff trop!! Elle est badass , surtout son pouvoir sanguinaire!!	2023-08-09 02:14:29.896799+02	4	1
\.


--
-- Data for Name: articles_genre; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.articles_genre (id, genre) FROM stdin;
1	Action
2	Amour
4	Surnaturel
5	Combat
6	Aventure
7	Arts martiaux
8	Sci-FI
9	School-Life
10	Mystère
11	Drame
12	Fantasy
\.


--
-- Data for Name: articles_tag; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.articles_tag (id, tag) FROM stdin;
1	DBZ
2	Demon slayer
3	Pillier
4	demon
5	chakra
6	tanjiro
7	Goku
8	dragon ball
9	Beerus
10	puissance
12	naruto
13	epeiste
11	combat
\.


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
25	Can add categories	7	add_categories
26	Can change categories	7	change_categories
27	Can delete categories	7	delete_categories
28	Can view categories	7	view_categories
29	Can add tags	8	add_tags
30	Can change tags	8	change_tags
31	Can delete tags	8	delete_tags
32	Can view tags	8	view_tags
33	Can add article	9	add_article
34	Can change article	9	change_article
35	Can delete article	9	delete_article
36	Can view article	9	view_article
37	Can add tag	10	add_tag
38	Can change tag	10	change_tag
39	Can delete tag	10	delete_tag
40	Can view tag	10	view_tag
41	Can add categorie	11	add_categorie
42	Can change categorie	11	change_categorie
43	Can delete categorie	11	delete_categorie
44	Can view categorie	11	view_categorie
45	Can add genre	12	add_genre
46	Can change genre	12	change_genre
47	Can delete genre	12	delete_genre
48	Can view genre	12	view_genre
49	Can add user profile	13	add_userprofile
50	Can change user profile	13	change_userprofile
51	Can delete user profile	13	delete_userprofile
52	Can view user profile	13	view_userprofile
53	Can add comment	14	add_comment
54	Can change comment	14	change_comment
55	Can delete comment	14	delete_comment
56	Can view comment	14	view_comment
57	Can add comment	15	add_comment
58	Can change comment	15	change_comment
59	Can delete comment	15	delete_comment
60	Can view comment	15	view_comment
\.


--
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
2	pbkdf2_sha256$600000$eSByTI2Vik70K5gmKhHrep$DouR4mXUYYwjti1Chf4I20OE0j/lRExEdGjwzrIU7bE=	\N	f	gabimaru			gabimaru@hellsparidies.com	f	t	2023-07-22 15:46:00.674105+02
3	pbkdf2_sha256$600000$J3aHxLvBX8L1TiLR6VOzg5$9MOjoNdLid6bt/zRE91ZtxNJzVzJmQ5Hc3M7u5d9l6U=	\N	f	bleacher			bleachteams@anime.com	f	t	2023-07-22 15:59:27.037104+02
6	pbkdf2_sha256$600000$iKDOWwee7Z5mkMGqMNlRh0$2ceTMpyT+PeJR9yRwgBXFvW8J/rObV/G4D95CclMBwA=	2023-08-08 17:25:57.516913+02	f	okit			okit@david.com	f	t	2023-08-08 03:31:53+02
4	pbkdf2_sha256$600000$ja85Uq3MLvjsv2wC5S9IAS$AjiJ3EAAUpnJ8yWvzXBvDe9xwb6XuqhxMgurg/Y3Lxg=	\N	f	minato			minatonamikaze@gmail.com	f	t	2023-08-04 17:04:14.252408+02
7	pbkdf2_sha256$600000$low2fVnd7g1jrqDB7bsy7H$hcBnpy/6uTpX8WTfdSIttEG+7OWvQoGnV4jjJKCEUA8=	2023-08-11 12:30:31.451811+02	f	mygaie			akuatekuate@gmail.com	f	t	2023-08-10 18:49:10.620912+02
1	pbkdf2_sha256$600000$oN4rwEkBVDl94rGJ051E8i$S9OHktJztFvPmxWtPB5xw78PmG4jmxZMyWeS5aktPTg=	2023-08-11 13:31:43.044607+02	t	OtakuAdmin	Alfred	Kuate	alfredkuate55@gmail.com	t	t	2023-07-22 14:13:31+02
5	pbkdf2_sha256$600000$rPmwFyOV1oHnmpvzLWQJFn$rz0XufK9JOQMsms3ItNlovWqaEV7vGqmFamOjew3Aq8=	2023-08-04 17:28:04.636423+02	f	saker			alfredkuate55@gmail.com	f	t	2023-08-04 17:06:48.748719+02
\.


--
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Data for Name: comment_comment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.comment_comment (id, content, created_at, article_id, user_id) FROM stdin;
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
1	2023-07-23 21:53:54.594157+02	1	Le meilleur combat dans Dragon Ball Z	1	[{"added": {}}]	9	1
2	2023-07-23 23:02:31.331741+02	1	Le meilleur combat dans Dragon Ball Z	2	[{"changed": {"fields": ["Sous content"]}}]	9	1
3	2023-07-23 23:05:34.320979+02	2	Classement des piliers par puissance (Demon Slayer)	1	[{"added": {}}]	9	1
4	2023-07-25 16:07:05.094682+02	3	05 fois ou Tanjiro Kamado à surpasser les piliers	1	[{"added": {}}]	9	1
5	2023-07-25 16:08:18.179826+02	2	Classement des piliers par puissance (Demon Slayer)	2	[{"changed": {"fields": ["Image article"]}}]	9	1
6	2023-07-25 16:39:04.313024+02	1	Le meilleur combat dans Dragon Ball Z	2	[{"changed": {"fields": ["Image article"]}}]	9	1
7	2023-07-25 17:11:59.073531+02	1	Action	1	[{"added": {}}]	12	1
8	2023-07-25 17:12:04.96185+02	2	Amour	1	[{"added": {}}]	12	1
9	2023-07-25 17:12:08.826161+02	3	Drame	1	[{"added": {}}]	12	1
10	2023-07-25 17:12:14.031446+02	4	Surnaturel	1	[{"added": {}}]	12	1
11	2023-07-25 17:12:20.947929+02	5	Combat	1	[{"added": {}}]	12	1
12	2023-07-25 17:12:54.800677+02	6	Aventure	1	[{"added": {}}]	12	1
13	2023-07-25 17:13:01.358364+02	7	Arts martiaux	1	[{"added": {}}]	12	1
14	2023-07-25 17:13:15.039751+02	8	Sci-FI	1	[{"added": {}}]	12	1
15	2023-07-25 17:13:21.568278+02	9	School-Life	1	[{"added": {}}]	12	1
16	2023-07-25 17:13:32.796675+02	10	Mystère	1	[{"added": {}}]	12	1
17	2023-07-25 17:13:35.116253+02	11	Drame	1	[{"added": {}}]	12	1
18	2023-07-25 17:13:38.291694+02	12	Fantasy	1	[{"added": {}}]	12	1
19	2023-07-25 17:13:47.413479+02	1	DBZ	1	[{"added": {}}]	10	1
20	2023-07-25 17:13:57.960349+02	2	Demon slayer	1	[{"added": {}}]	10	1
21	2023-07-25 17:14:03.256142+02	3	Pillier	1	[{"added": {}}]	10	1
22	2023-07-25 17:14:06.568927+02	4	demon	1	[{"added": {}}]	10	1
23	2023-07-25 17:14:12.054128+02	5	chakra	1	[{"added": {}}]	10	1
24	2023-07-25 17:14:15.399895+02	6	tanjiro	1	[{"added": {}}]	10	1
25	2023-07-25 17:14:21.065169+02	7	Goku	1	[{"added": {}}]	10	1
26	2023-07-25 17:14:31.044978+02	8	dragon ball	1	[{"added": {}}]	10	1
27	2023-07-25 17:14:36.531534+02	9	Beerus	1	[{"added": {}}]	10	1
28	2023-07-25 17:14:41.029516+02	10	puissance	1	[{"added": {}}]	10	1
29	2023-07-25 17:14:44.575952+02	11	comnbat	1	[{"added": {}}]	10	1
30	2023-07-25 17:15:35.053191+02	3	05 fois ou Tanjiro Kamado à surpasser les piliers	2	[{"changed": {"fields": ["Tag", "Genre"]}}]	9	1
31	2023-07-25 17:53:03.517499+02	1	Actualité Manga	1	[{"added": {}}]	11	1
32	2023-07-25 17:53:09.127518+02	2	Dragon Ball	1	[{"added": {}}]	11	1
33	2023-07-25 17:53:15.811726+02	3	Demon Slayer	1	[{"added": {}}]	11	1
34	2023-07-25 17:53:22.72082+02	4	Naruto Shippuden	1	[{"added": {}}]	11	1
35	2023-07-25 17:53:26.375099+02	5	Mashles	1	[{"added": {}}]	11	1
36	2023-07-25 17:53:38.939103+02	6	Hell's paradise	1	[{"added": {}}]	11	1
37	2023-07-25 17:53:57.461272+02	3	05 fois ou Tanjiro Kamado à surpasser les piliers	2	[{"changed": {"fields": ["Categorie"]}}]	9	1
38	2023-07-25 17:54:30.260215+02	2	Classement des piliers par puissance (Demon Slayer)	2	[{"changed": {"fields": ["Categorie", "Tag", "Genre"]}}]	9	1
39	2023-07-25 17:54:56.65193+02	1	Le meilleur combat dans Dragon Ball Z	2	[{"changed": {"fields": ["Categorie", "Tag", "Genre"]}}]	9	1
40	2023-07-26 14:43:26.105023+02	3	05 fois ou Tanjiro Kamado à surpasser les piliers	2	[{"changed": {"fields": ["Categorie"]}}]	9	1
41	2023-07-26 14:54:00.975608+02	2	Classement des piliers par puissance (Demon Slayer)	2	[{"changed": {"fields": ["Tag", "Genre"]}}]	9	1
42	2023-07-26 15:04:50.285864+02	4	Histoire de Nezuko Kamado	1	[{"added": {}}]	9	1
43	2023-07-26 15:59:12.959909+02	6	Hell's paradise	2	[{"changed": {"fields": ["Description", "Image"]}}]	11	1
44	2023-07-26 16:12:11.260634+02	6	Hell's paradise	2	[]	11	1
45	2023-07-26 16:17:37.343029+02	5	Mashles	2	[{"changed": {"fields": ["Description", "Image categorie"]}}]	11	1
46	2023-07-26 16:18:24.459319+02	3	Demon Slayer	2	[{"changed": {"fields": ["Description", "Image categorie"]}}]	11	1
47	2023-07-26 16:19:52.101698+02	2	Dragon Ball	2	[{"changed": {"fields": ["Description", "Image categorie"]}}]	11	1
48	2023-07-26 16:21:09.585814+02	1	Actualité Manga	2	[{"changed": {"fields": ["Description"]}}]	11	1
49	2023-07-26 16:25:08.150259+02	4	Naruto Shippuden	2	[{"changed": {"fields": ["Description", "Image categorie"]}}]	11	1
50	2023-07-26 16:53:07.745971+02	3	Demon Slayer	2	[{"changed": {"fields": ["Image categorie"]}}]	11	1
51	2023-07-26 16:53:11.922659+02	3	Demon Slayer	2	[]	11	1
52	2023-07-26 17:15:59.878298+02	1	Actualité Manga	2	[{"changed": {"fields": ["Image categorie"]}}]	11	1
53	2023-07-26 17:41:37.505727+02	6	Hell's paradise	2	[{"changed": {"fields": ["Image categorie"]}}]	11	1
54	2023-07-26 17:41:44.615959+02	5	Mashles	2	[{"changed": {"fields": ["Image categorie"]}}]	11	1
55	2023-07-26 17:41:53.317347+02	4	Naruto Shippuden	2	[{"changed": {"fields": ["Image categorie"]}}]	11	1
56	2023-07-26 17:42:00.952214+02	3	Demon Slayer	2	[{"changed": {"fields": ["Image categorie"]}}]	11	1
57	2023-07-26 17:42:12.057254+02	2	Dragon Ball	2	[{"changed": {"fields": ["Image categorie"]}}]	11	1
58	2023-07-26 17:42:14.950536+02	2	Dragon Ball	2	[]	11	1
59	2023-07-26 17:42:21.666694+02	1	Actualité Manga	2	[{"changed": {"fields": ["Image categorie"]}}]	11	1
60	2023-07-28 14:36:32.132381+02	6	Qui est dvdvdvdv	2	[{"changed": {"fields": ["Image article"]}}]	9	1
61	2023-07-29 16:03:57.319099+02	12	naruto	1	[{"added": {}}]	10	1
62	2023-07-29 16:04:08.18394+02	13	epeiste	1	[{"added": {}}]	10	1
63	2023-07-29 16:04:11.002837+02	7	Naruto : Pourquoi Kisame ressemble à un requin ?	2	[{"changed": {"fields": ["Tag"]}}]	9	1
64	2023-07-29 16:08:11.336303+02	7	Naruto : Pourquoi Kisame ressemble à un requin ?	2	[{"changed": {"fields": ["Categorie"]}}]	9	1
65	2023-07-29 16:10:24.741925+02	3	Drame	3		12	1
66	2023-07-29 16:10:47.832131+02	11	combat	2	[{"changed": {"fields": ["Tag"]}}]	10	1
67	2023-07-29 16:11:57.976166+02	7	Naruto : Pourquoi Kisame ressemble à un requin ?	2	[{"changed": {"fields": ["Categorie", "Tag"]}}]	9	1
68	2023-07-29 16:26:38.828119+02	8	DBZ : Trunks du futur expliqué	2	[{"changed": {"fields": ["Image article"]}}]	9	1
69	2023-07-29 16:36:18.292633+02	4	Histoire de Nezuko Kamado	2	[]	9	1
70	2023-07-29 16:36:47.607472+02	4	Histoire de Nezuko Kamado	2	[{"changed": {"fields": ["Categorie"]}}]	9	1
71	2023-07-29 16:45:28.883053+02	8	DBZ : Trunks du futur expliqué	2	[{"changed": {"fields": ["Image article"]}}]	9	1
72	2023-07-31 15:10:24.102499+02	1	otaku	2	[{"changed": {"fields": ["First name", "Last name"]}}]	4	1
73	2023-08-05 15:45:19.139395+02	1	otaku	2	[{"added": {"name": "user profile", "object": "otaku"}}]	4	1
74	2023-08-08 00:53:33.224603+02	1	otaku	2	[{"changed": {"name": "user profile", "object": "otaku", "fields": ["Adresse domicile"]}}]	4	1
75	2023-08-08 17:02:31.139362+02	2	Comment object (2)	2	[{"changed": {"fields": ["Content"]}}]	15	1
76	2023-08-08 17:03:09.550459+02	1	Comment object (1)	2	[{"changed": {"fields": ["Content"]}}]	15	1
77	2023-08-08 17:14:50.385382+02	6	okit	2	[{"changed": {"name": "user profile", "object": "okit", "fields": ["Avatar"]}}]	4	1
78	2023-08-08 17:25:09.637797+02	4	Histoire de Nezuko Kamado	2	[{"changed": {"fields": ["Tag", "Genre"]}}]	9	1
79	2023-08-08 17:27:38.696502+02	7	Naruto : Pourquoi Kisame ressemble à un requin ?	2	[{"changed": {"fields": ["Genre"]}}]	9	1
80	2023-08-11 13:32:07.698655+02	7	My Heroes Academia (MHA)	2	[{"changed": {"fields": ["Image categorie"]}}]	11	1
81	2023-08-11 13:32:46.542503+02	7	My Heroes Academia (MHA)	2	[{"changed": {"fields": ["Description"]}}]	11	1
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
7	articles	categories
8	articles	tags
9	articles	article
10	articles	tag
11	articles	categorie
12	articles	genre
13	accounts_user	userprofile
14	comment	comment
15	articles	comment
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2023-07-22 14:12:29.700971+02
2	auth	0001_initial	2023-07-22 14:12:29.891154+02
3	admin	0001_initial	2023-07-22 14:12:29.941123+02
4	admin	0002_logentry_remove_auto_add	2023-07-22 14:12:29.95181+02
5	admin	0003_logentry_add_action_flag_choices	2023-07-22 14:12:29.960844+02
6	contenttypes	0002_remove_content_type_name	2023-07-22 14:12:29.983247+02
7	auth	0002_alter_permission_name_max_length	2023-07-22 14:12:29.991016+02
8	auth	0003_alter_user_email_max_length	2023-07-22 14:12:30.00119+02
9	auth	0004_alter_user_username_opts	2023-07-22 14:12:30.006213+02
10	auth	0005_alter_user_last_login_null	2023-07-22 14:12:30.01542+02
11	auth	0006_require_contenttypes_0002	2023-07-22 14:12:30.020934+02
12	auth	0007_alter_validators_add_error_messages	2023-07-22 14:12:30.020934+02
13	auth	0008_alter_user_username_max_length	2023-07-22 14:12:30.054412+02
14	auth	0009_alter_user_last_name_max_length	2023-07-22 14:12:30.063099+02
15	auth	0010_alter_group_name_max_length	2023-07-22 14:12:30.080959+02
16	auth	0011_update_proxy_permissions	2023-07-22 14:12:30.097678+02
17	auth	0012_alter_user_first_name_max_length	2023-07-22 14:12:30.106433+02
18	sessions	0001_initial	2023-07-22 14:12:30.145676+02
21	articles	0001_initial	2023-07-23 21:51:07.07149+02
22	articles	0002_article_sous_content	2023-07-23 23:00:53.283875+02
23	articles	0003_article_image_article	2023-07-25 15:16:51.395452+02
24	articles	0004_genre_tag_remove_article_tag_article_genre_and_more	2023-07-25 16:59:09.466086+02
25	articles	0005_categorie_remove_article_categorie_article_categorie	2023-07-25 17:51:55.965165+02
26	articles	0006_categorie_description_categorie_image	2023-07-26 15:55:39.114971+02
27	articles	0007_rename_image_categorie_image_categorie	2023-07-26 16:13:30.915386+02
28	articles	0008_remove_categorie_image_categorie_categorie_image	2023-07-26 17:41:13.907777+02
29	articles	0009_remove_categorie_image_categorie_image_categorie	2023-07-26 17:41:13.923352+02
30	accounts_user	0001_initial	2023-08-05 14:43:14.782169+02
31	accounts_user	0002_userprofile_avatar	2023-08-05 14:45:41.399225+02
32	accounts_user	0003_alter_userprofile_adresse_domicile	2023-08-08 01:01:19.730338+02
33	accounts_user	0004_remove_userprofile_adresse_domicile	2023-08-08 01:05:03.377955+02
34	comment	0001_initial	2023-08-08 14:34:17.927748+02
35	articles	0010_comment	2023-08-08 14:57:49.763767+02
36	articles	0011_alter_article_image_article	2023-08-08 17:13:47.338832+02
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
f687in71cq2rtmxg7drdna375sc8i2tn	.eJxVjEEOwiAQRe_C2hCGYSh16d4zEOiAVA0kpV0Z765NutDtf-_9l_BhW4vfelr8zOIsQJx-tximR6o74HuotyanVtdljnJX5EG7vDZOz8vh_h2U0Mu3djBYAmsI3EgUFNrsogViinnIFJkyolIZyGAKSAycrdOkk8FRYxTvD6zVNrc:1qNBVa:d2ME6dCHKF00svCtiYo9whDFAmRJEnjeXbKdLDRuynk	2023-08-05 14:14:50.682233+02
pzlk4wg7ykhqdj0h0w1sb3e0rea0pt67	.eJxVjEEOwiAQRe_C2hCGYSh16d4zEOiAVA0kpV0Z765NutDtf-_9l_BhW4vfelr8zOIsQJx-tximR6o74HuotyanVtdljnJX5EG7vDZOz8vh_h2U0Mu3djBYAmsI3EgUFNrsogViinnIFJkyolIZyGAKSAycrdOkk8FRYxTvD6zVNrc:1qNC3s:Ta3DaBI8wr-rIwZUVdEPo56I0u5C3teDMzR3ze0V3i0	2023-08-05 14:50:16.558394+02
mdtm2hjykc03xphcap2164d3icbdhek6	.eJxVjEEOwiAQRe_C2hCGYSh16d4zEOiAVA0kpV0Z765NutDtf-_9l_BhW4vfelr8zOIsQJx-tximR6o74HuotyanVtdljnJX5EG7vDZOz8vh_h2U0Mu3djBYAmsI3EgUFNrsogViinnIFJkyolIZyGAKSAycrdOkk8FRYxTvD6zVNrc:1qNCz2:hRCMyd--uUiZrGVNdtMexz0G_okS1HWMPeJGiPAHMe4	2023-08-05 15:49:20.923765+02
mtvpw0lo9r9j209vb7giiv5ekajjo6m6	eyJfcGFzc3dvcmRfcmVzZXRfdG9rZW4iOiJic3FpZzMtNjdlNGRmMWI4YzBjZTZkNDg5MzVmNzQwOGU2NjYxNWIifQ:1qUAvq:CZ1uEC6YOO03d3475mxi8Q75yNqaOTVQnHKGCtEeRjM	2023-08-24 21:02:50.05078+02
rnmtjsc2947t51at4yv0i8797os3nbrb	.eJxVjEsOwiAUAO_C2hAetEBcuvcM5H3AVk1JSrtqvLsh6UK3M5M5VMJ9m9Le8ppmUVcF6vLLCPmVly7kicujaq7Lts6ke6JP2_S9Sn7fzvZvMGGb-ja7EY0fpNhoYoAhCoi1gOOITEw-cHQQSyZPxXgXBuOALUhPORv1-QLPTzdX:1qNdGX:4D9xDcRbqsQWax0su364zfiWf1WME_Nbzi3FmK77bkQ	2023-08-06 19:53:09.63999+02
gwodjfzu5djvociks7spm6ffhuu1nh40	.eJxVjEEOwiAQRe_C2pABoYBL9z0DmRlAqoYmpV0Z765NutDtf-_9l4i4rTVuPS9xSuIilDj9boT8yG0H6Y7tNkue27pMJHdFHrTLcU75eT3cv4OKvX7rwsVZcBqBgtaK8hA8GncGBlsMJeUxkHXsAwENJikDIWTrwTKy1iDeH9oqN2c:1qUQMp:O0cvOL6A7pAxWxFKmaqG3JlMtriEQ8Va6lE1K3J5HgQ	2023-08-25 13:31:43.073371+02
1d2q689mksdsvneephx2enjf3zklabwh	eyJfcGFzc3dvcmRfcmVzZXRfdG9rZW4iOiJic2xlNzMtMjEyMTJkODIwMjYzZDZkODZlNjBhOTIzNjdkYzViNDQifQ:1qTAoN:k0PS4318dymHKQ5QjZmhpaVz2d77AgvL7QS_zANpWO4	2023-08-22 02:42:59.829897+02
98w4wtxbj1t35864yg72ovxmvxh459lj	e30:1qTB7e:J_qVZ08bkV1R6ha3MvdHrVxuejvuAGmYz5XekUSyYjg	2023-08-22 03:02:54.779728+02
6aqtb1ln29et7guwb1cx03nvrggu9zn1	.eJxVjEEOwiAQRe_C2pABoYBL9z0DmRlAqoYmpV0Z765NutDtf-_9l4i4rTVuPS9xSuIilDj9boT8yG0H6Y7tNkue27pMJHdFHrTLcU75eT3cv4OKvX7rwsVZcBqBgtaK8hA8GncGBlsMJeUxkHXsAwENJikDIWTrwTKy1iDeH9oqN2c:1qTBGI:SKuBw3JzCV60hDG7mDgZjL6HydOjLc2Khn7LzDZuw7k	2023-08-22 03:11:50.6188+02
ob3knnwfb2b7d3sy09jb5fzfsz1wqp09	.eJxVjEEOwiAQRe_C2hCgFBiX7j0DmSmDVA0kpV0Z765NutDtf-_9l4i4rSVunZc4J3EWTpx-N8LpwXUH6Y711uTU6rrMJHdFHrTLa0v8vBzu30HBXr41qeARjNJgIWgbxkGFASzlrLPN7JExJdJuVMExk3Fegw8TGjSgDYF4fwDGJTdV:1qTBZv:etALXSyT_Ml0ALexQ1-lPlvJUMMbaApAIF08mbCWkJM	2023-08-22 03:32:07.088106+02
ijety0p9o6n4kpp4ttc8623htoaimehv	.eJxVjEEOwiAQRe_C2pABoYBL9z0DmRlAqoYmpV0Z765NutDtf-_9l4i4rTVuPS9xSuIilDj9boT8yG0H6Y7tNkue27pMJHdFHrTLcU75eT3cv4OKvX7rwsVZcBqBgtaK8hA8GncGBlsMJeUxkHXsAwENJikDIWTrwTKy1iDeH9oqN2c:1qTLeS:FohgHVpuCu9aSHfc4YaFJ6cfRJJs5oiEExHOiKFDrWU	2023-08-22 14:17:28.267041+02
f0zdi2hqggp5bjcvrs4z2zi2zse9vepo	.eJxVjEEOwiAQRe_C2pABoYBL9z0DmRlAqoYmpV0Z765NutDtf-_9l4i4rTVuPS9xSuIilDj9boT8yG0H6Y7tNkue27pMJHdFHrTLcU75eT3cv4OKvX7rwsVZcBqBgtaK8hA8GncGBlsMJeUxkHXsAwENJikDIWTrwTKy1iDeH9oqN2c:1qTNNJ:M79JQCCeXI0ER6xpFfiKj9Uyk7zSHQUJN69Md8Eg6dY	2023-08-22 16:07:53.898383+02
\.


--
-- Name: accounts_user_userprofile_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.accounts_user_userprofile_id_seq', 3, true);


--
-- Name: articles_article_categorie_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.articles_article_categorie_id_seq', 19, true);


--
-- Name: articles_article_genre_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.articles_article_genre_id_seq', 38, true);


--
-- Name: articles_article_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.articles_article_id_seq', 10, true);


--
-- Name: articles_article_tag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.articles_article_tag_id_seq', 47, true);


--
-- Name: articles_categorie_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.articles_categorie_id_seq', 7, true);


--
-- Name: articles_comment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.articles_comment_id_seq', 5, true);


--
-- Name: articles_genre_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.articles_genre_id_seq', 12, true);


--
-- Name: articles_tag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.articles_tag_id_seq', 13, true);


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 60, true);


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 7, true);


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- Name: comment_comment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.comment_comment_id_seq', 1, false);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 81, true);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 15, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 36, true);


--
-- Name: accounts_user_userprofile accounts_user_userprofile_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.accounts_user_userprofile
    ADD CONSTRAINT accounts_user_userprofile_pkey PRIMARY KEY (id);


--
-- Name: accounts_user_userprofile accounts_user_userprofile_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.accounts_user_userprofile
    ADD CONSTRAINT accounts_user_userprofile_user_id_key UNIQUE (user_id);


--
-- Name: articles_article_categorie articles_article_categor_article_id_categorie_id_e431150a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_categorie
    ADD CONSTRAINT articles_article_categor_article_id_categorie_id_e431150a_uniq UNIQUE (article_id, categorie_id);


--
-- Name: articles_article_categorie articles_article_categorie_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_categorie
    ADD CONSTRAINT articles_article_categorie_pkey PRIMARY KEY (id);


--
-- Name: articles_article_genre articles_article_genre_article_id_genre_id_241f43c3_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_genre
    ADD CONSTRAINT articles_article_genre_article_id_genre_id_241f43c3_uniq UNIQUE (article_id, genre_id);


--
-- Name: articles_article_genre articles_article_genre_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_genre
    ADD CONSTRAINT articles_article_genre_pkey PRIMARY KEY (id);


--
-- Name: articles_article articles_article_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article
    ADD CONSTRAINT articles_article_pkey PRIMARY KEY (id);


--
-- Name: articles_article_tag articles_article_tag_article_id_tag_id_67deda78_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_tag
    ADD CONSTRAINT articles_article_tag_article_id_tag_id_67deda78_uniq UNIQUE (article_id, tag_id);


--
-- Name: articles_article_tag articles_article_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_tag
    ADD CONSTRAINT articles_article_tag_pkey PRIMARY KEY (id);


--
-- Name: articles_categorie articles_categorie_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_categorie
    ADD CONSTRAINT articles_categorie_pkey PRIMARY KEY (id);


--
-- Name: articles_comment articles_comment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_comment
    ADD CONSTRAINT articles_comment_pkey PRIMARY KEY (id);


--
-- Name: articles_genre articles_genre_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_genre
    ADD CONSTRAINT articles_genre_pkey PRIMARY KEY (id);


--
-- Name: articles_tag articles_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_tag
    ADD CONSTRAINT articles_tag_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- Name: comment_comment comment_comment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comment_comment
    ADD CONSTRAINT comment_comment_pkey PRIMARY KEY (id);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: articles_article_author_id_059aea7d; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX articles_article_author_id_059aea7d ON public.articles_article USING btree (author_id);


--
-- Name: articles_article_categorie_article_id_41a77dd3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX articles_article_categorie_article_id_41a77dd3 ON public.articles_article_categorie USING btree (article_id);


--
-- Name: articles_article_categorie_categorie_id_5583fb40; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX articles_article_categorie_categorie_id_5583fb40 ON public.articles_article_categorie USING btree (categorie_id);


--
-- Name: articles_article_genre_article_id_b3366178; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX articles_article_genre_article_id_b3366178 ON public.articles_article_genre USING btree (article_id);


--
-- Name: articles_article_genre_genre_id_c3f0b116; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX articles_article_genre_genre_id_c3f0b116 ON public.articles_article_genre USING btree (genre_id);


--
-- Name: articles_article_tag_article_id_d7f5235a; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX articles_article_tag_article_id_d7f5235a ON public.articles_article_tag USING btree (article_id);


--
-- Name: articles_article_tag_tag_id_6b8f887b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX articles_article_tag_tag_id_6b8f887b ON public.articles_article_tag USING btree (tag_id);


--
-- Name: articles_comment_article_id_59ff1409; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX articles_comment_article_id_59ff1409 ON public.articles_comment USING btree (article_id);


--
-- Name: articles_comment_user_id_d64f3643; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX articles_comment_user_id_d64f3643 ON public.articles_comment USING btree (user_id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- Name: comment_comment_article_id_3cc364fc; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX comment_comment_article_id_3cc364fc ON public.comment_comment USING btree (article_id);


--
-- Name: comment_comment_user_id_6078e57b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX comment_comment_user_id_6078e57b ON public.comment_comment USING btree (user_id);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: accounts_user_userprofile accounts_user_userprofile_user_id_5347822a_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.accounts_user_userprofile
    ADD CONSTRAINT accounts_user_userprofile_user_id_5347822a_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: articles_article articles_article_author_id_059aea7d_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article
    ADD CONSTRAINT articles_article_author_id_059aea7d_fk_auth_user_id FOREIGN KEY (author_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: articles_article_categorie articles_article_cat_article_id_41a77dd3_fk_articles_; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_categorie
    ADD CONSTRAINT articles_article_cat_article_id_41a77dd3_fk_articles_ FOREIGN KEY (article_id) REFERENCES public.articles_article(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: articles_article_categorie articles_article_cat_categorie_id_5583fb40_fk_articles_; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_categorie
    ADD CONSTRAINT articles_article_cat_categorie_id_5583fb40_fk_articles_ FOREIGN KEY (categorie_id) REFERENCES public.articles_categorie(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: articles_article_genre articles_article_gen_article_id_b3366178_fk_articles_; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_genre
    ADD CONSTRAINT articles_article_gen_article_id_b3366178_fk_articles_ FOREIGN KEY (article_id) REFERENCES public.articles_article(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: articles_article_genre articles_article_genre_genre_id_c3f0b116_fk_articles_genre_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_genre
    ADD CONSTRAINT articles_article_genre_genre_id_c3f0b116_fk_articles_genre_id FOREIGN KEY (genre_id) REFERENCES public.articles_genre(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: articles_article_tag articles_article_tag_article_id_d7f5235a_fk_articles_article_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_tag
    ADD CONSTRAINT articles_article_tag_article_id_d7f5235a_fk_articles_article_id FOREIGN KEY (article_id) REFERENCES public.articles_article(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: articles_article_tag articles_article_tag_tag_id_6b8f887b_fk_articles_tag_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_article_tag
    ADD CONSTRAINT articles_article_tag_tag_id_6b8f887b_fk_articles_tag_id FOREIGN KEY (tag_id) REFERENCES public.articles_tag(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: articles_comment articles_comment_article_id_59ff1409_fk_articles_article_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_comment
    ADD CONSTRAINT articles_comment_article_id_59ff1409_fk_articles_article_id FOREIGN KEY (article_id) REFERENCES public.articles_article(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: articles_comment articles_comment_user_id_d64f3643_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.articles_comment
    ADD CONSTRAINT articles_comment_user_id_d64f3643_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_comment comment_comment_article_id_3cc364fc_fk_articles_article_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comment_comment
    ADD CONSTRAINT comment_comment_article_id_3cc364fc_fk_articles_article_id FOREIGN KEY (article_id) REFERENCES public.articles_article(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_comment comment_comment_user_id_6078e57b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comment_comment
    ADD CONSTRAINT comment_comment_user_id_6078e57b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

